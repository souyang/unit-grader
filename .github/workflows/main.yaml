name: Main

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        python-version: ["3.9"]
        os: ["ubuntu-latest"]
        # comment out the python-version to test on all versions
        # and os to test on all os to save billable minutes
        # python-version: ["3.9", "3.10", "3.11", "3.12"]
        # os: ["windows-latest", "ubuntu-latest", "macos-latest"]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up PDM
      uses: pdm-project/setup-pdm@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: true
        cache-dependency-path: '**/pdm.lock'
  
    - name: Install dependencies
      run: pdm sync

    - name: Run Tests
      run: pdm run test

    - name: Lint Code
      run: pdm run lint

    - name: Format Code
      run: pdm run format

    - name: Spell Check
      run: pdm run spell
  
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up PDM
        uses: pdm-project/setup-pdm@v3
        with:
          python-version: "3.9"
          cache: true
          cache-dependency-path: '**/pdm.lock'

      - name: Install dependencies
        run: pdm sync

      - name: Bot Defaults
        uses: devlooped/actions-bot@v1.0.1
        with:
          github-token: ${{ secrets.SOUYANG_GITHUB_TOKEN }}
    
      - name: Bump Patch Version
        run: |
          git pull --no-edit origin main
          CURRENT_VERSION=$(awk -F '"' '/^version/{print $2}' "pyproject.toml")
          pdm bumpversion --current-version $CURRENT_VERSION patch pyproject.toml src/unit_grader/__init__.py --verbose --no-configured-files
          NEW_VERSION=$(awk -F '"' '/^version/{print $2}' "pyproject.toml")
          
          # Check if there are changes before committing
          if git diff --exit-code; then
            echo "Version is not updated in pyproject.toml."
          else
            git remote set-url origin https://x-access-token:${{ secrets.SOUYANG_GITHUB_TOKEN }}@github.com/souyang/unit-grader 
            # Commit and push the change on pyproject.toml
            git add pyproject.toml src/unit_grader/__init__.py
            git commit -m "[Bot] Updating version from ${CURRENT_VERSION} to ${NEW_VERSION}"
            git push
            # Create and publish a new release tag
            TAG_NAME="v$NEW_VERSION"
            if git rev-parse -q --verify "refs/tags/$TAG_NAME" > /dev/null; then
              echo "Tag $TAG_NAME exists. Deleting remotely..."
              git push origin :"$TAG_NAME"
              echo "Tag $TAG_NAME deleted remotely."
            else
              echo "Tag $TAG_NAME does not exist."
            fi              
            git tag -a "$TAG_NAME" -m "Releasing version $NEW_VERSION"
            git push origin "$TAG_NAME"
            echo "Tag $TAG_NAME is created remotely."  
            git tag -l --sort=-version:refname "v*"
          fi           
    
      - name: Create Release
        run: |
          pdm publish --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} 

      - name: Build API Documentation
        run: pdm run doc
            
      - name: Deploy to Netlify
        id: netlify
        uses: nwtgck/actions-netlify@v1
        with:
          production-branch: "main"
          publish-dir: "./docs/_build/html" # Change this to the directory where your static site is built
          deploy-message: "Deploy from GitHub Actions"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          enable-pull-request-comment: true
          enable-commit-comment: false
          production-deploy: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Print Notice
        uses: actions/github-script@v6
        env:
          NETLIFY_URL: ${{ steps.netlify.outputs.deploy-url }}
        with:
          script: |
            const {NETLIFY_URL} = process.env
            core.notice(`Published to: ${NETLIFY_URL}`)