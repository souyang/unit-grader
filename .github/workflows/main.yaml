name: CI Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        python-version: ["3.9"]
        os: ["ubuntu-latest"]
        # os: ["windows-latest", "ubuntu-latest", "macos-latest"]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up PDM
      uses: pdm-project/setup-pdm@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: true
        cache-dependency-path: '**/pdm.lock'
  
    - name: Install dependencies
      run: pdm sync

    - name: Run Tests
      run: pdm run test

    - name: Lint Code
      run: pdm run lint

    - name: Format Code
      run: pdm run format

    - name: Spell Check
      run: pdm run spell
  
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up PDM
        uses: pdm-project/setup-pdm@v3
        with:
          python-version: "3.9"
          cache: true
          cache-dependency-path: '**/pdm.lock'

      - name: Install dependencies
        run: pdm sync

      - name: Bot Defaults
        uses: devlooped/actions-bot@v1.0.1
        with:
          github-token: ${{ secrets.SOUYANG_GITHUB_TOKEN }}
    
      - name: Bump Patch Version
        run: |
          set -e
          git pull --no-edit origin main
          CURRENT_VERSION=$(awk -F '"' '/^version/{print $2}' "pyproject.toml")
          pdm bumpversion --current-version $CURRENT_VERSION patch pyproject.toml --verbose --no-configured-files
          NEW_VERSION=$(awk -F '"' '/^version/{print $2}' "pyproject.toml")
          
          # Check if there are changes before committing
          if git diff --exit-code; then
            echo "Version is not updated in pyproject.toml."
          else
            git remote set-url origin https://x-access-token:${{ secrets.SOUYANG_GITHUB_TOKEN }}@github.com/souyang/unit-grader 
            # Commit and push the change on pyproject.toml
            git add pyproject.toml
            git commit -m "[Bot] Updating version from ${CURRENT_VERSION} to ${NEW_VERSION}"
            git push
            # Create and publish a new release tag
            TAG_NAME="v$NEW_VERSION"
            if git rev-parse -q --verify "refs/tags/$TAG_NAME" > /dev/null; then
              echo "Tag $TAG_NAME exists. Deleting remotely..."
              git push origin :"$TAG_NAME"
              echo "Tag $TAG_NAME deleted remotely."
            else
              echo "Tag $TAG_NAME does not exist."
            fi              
            git tag -a "$TAG_NAME" -m "Releasing version $NEW_VERSION"
            git push origin "$TAG_NAME"
            echo "Tag $TAG_NAME is created remotely."  
            git tag -l --sort=-version:refname "v*"
          fi
          set +e            
    
      - name: Create Release
        run: |
          pdm publish --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} 


